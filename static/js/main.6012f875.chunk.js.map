{"version":3,"sources":["../node_modules/@babel/standalone sync","MotionBox.tsx","evaluate.ts","ThemeManager.ts","ComponentItem.tsx","Editor.tsx","PaletteModal.tsx","AddComponentModal.tsx","fonts.ts","FontLoaderModal.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","MotionBox","motion","chakra","div","evaluate","transpiled","Babel","presets","sourceType","safeEval","Chakra","React","window","err","console","log","getDefaultRenderer","componentKey","DEFAULT_COMPONENT_THEME","DEFAULT_GLOBAL_THEME","DEFAULT_COMPONENTS","Alert","render","overrides","key","name","Badge","Button","Checkbox","Heading","Input","Spinner","Tabs","Tag","ThemeManager","global","components","fonts","observable","selected","addComponent","this","Object","mapValues","data","getComponentOverrides","extendTheme","getGlobalOverrides","theme","obj","result","stringify","error","renderer","font","push","splice","indexOf","computed","localStorage","getItem","JSON","parse","ErrorFallback","resetErrorBoundary","role","message","onClick","animationVariants","expanded","transform","ComponentItem","observer","mode","component","manager","variants","sizes","undefined","getVariants","getSizes","rendererStr","getRawComponentRenderer","Renderer","useMemo","FallbackComponent","onReset","style","transformOrigin","p","size","pb","w","spacing","map","variant","title","minWidth","alignSelf","defaultIndex","py","Card","children","otherProps","styles","useColorModeValue","borderColor","bg","rounded","border","borderBottom","debounced","setRawGlobalOverrides","debounce","val","setRawComponentOverrides","setRawComponentRenderer","Editor","getRawGlobalOverrides","editorRef","useRef","getSelected","useState","selectedTab","setSelectedTab","tabs","useEffect","editorVals","value","setValue","getRawComponentOverrides","direction","h","colorScheme","color","index","onChange","tab","fontSize","textTransform","marginBottom","_selected","_hover","_focus","boxShadow","editorDidMount","editor","current","setSize","setTimeout","refresh","options","lineNumbers","tabSize","className","detach","_","__","Color","SATURATIONS","LIGHTNESSES","PaletteModal","isOpen","onClose","hex","setHex","selectedColor","chroma","targetLightness","minBy","lightness","Math","abs","get","colorIndex","scale","i","set","delta","saturate","desaturate","reduce","useClipboard","hasCopied","onCopy","onDragStart","preventDefault","borderRadius","overflow","disableAlpha","colorKey","flex","mr","AddComponentModal","onSubmit","nameEl","setName","setKey","keyAlreadyExists","isValid","includes","initialFocusRef","isCentered","ref","target","placeholder","type","disabled","list","a","axios","res","items","load","families","WebFont","google","autorun","getSelectedFonts","length","fontService","FontLoaderModal","setFonts","search","setSearch","then","selectedFonts","fontFamiliesStr","str","fontFamily","body","heading","mono","unselectFont","px","overflowY","filter","family","toLowerCase","slice","isChecked","checked","selectFont","menu","open","transition","staggerChildren","staggerDirection","closed","menuItem","opacity","x","CodeMenu","onColorsClick","onFontsClick","onDownloadClick","placement","label","aria-label","icon","AnimatePresence","paddingTop","initial","animate","exit","padding","setItem","delay","App","sidebarOpen","setSidebarOpen","modals","useDisclosure","useColorMode","colorMode","toggleColorMode","cardBg","MotionConfig","stiffness","damping","align","justify","fontWeight","display","alignItems","pos","right","mb","htmlFor","columns","componentKeys","height","cursor","setSelected","onOpen","flexDirection","top","bottom","left","borderLeft","marginRight","downloadFile","themeStr","zIndex","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ErrorToast","toast","useToast","toastId","duration","isClosable","close","ThemedApp","ReactDOM","StrictMode","initialColorMode","document","getElementById"],"mappings":"+GAAA,SAASA,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,K,qVCDVC,EAF6BC,YAAOC,IAAOC,K,kICmB3CC,EAlBE,SAACV,GAEhBA,EAAI,WAAOA,EAAP,KACJ,IACE,IAAIW,EAAaC,YAAgBZ,EAAM,CACrCa,QAAS,CAAC,MAAO,SACjBC,WAAY,WACXd,KAIH,OAHeW,EACXI,IAASJ,EAAD,YAAC,eAAiBK,GAAlB,IAA0BA,SAAQC,QAAOC,iBACjD,KAEJ,MAAOC,GAEP,OADAC,QAAQC,IAAIF,GACL,O,SCZLG,EAAqB,SACzBC,GADyB,4HAIIA,EAJJ,4FAYrBC,EAAuB,2XAcvBC,EAAoB,kgCAiDpBC,EAAoD,CACxDC,MAAO,CACLC,OAAO,gOAOPC,UAAWL,EACXM,IAAK,QACLC,KAAM,UAERC,MAAO,CACLJ,OAAO,+GAQPC,UAAWL,EACXM,IAAK,QACLC,KAAM,UAERE,OAAQ,CACNL,OAAO,gHAQPC,UAAWL,EACXM,IAAK,SACLC,KAAM,WAERG,SAAU,CACRN,OAAO,4FAMPC,UAAWL,EACXM,IAAK,WACLC,KAAM,cAERI,QAAS,CACPP,OAAO,mHAQPC,UAAWL,EACXM,IAAK,UACLC,KAAM,YAERK,MAAO,CACLR,OAAO,sHAOPC,UAAWL,EACXM,IAAK,QACLC,KAAM,UAERM,QAAS,CACPT,OAAO,gIAQPC,UAAU,6XAeVC,IAAK,UACLC,KAAM,YAERO,KAAM,CACJV,OAAO,oLASPC,UAAWL,EACXM,IAAK,OACLC,KAAM,QAERQ,IAAK,CACHX,OAAO,2GAQPC,UAAWL,EACXM,IAAK,MACLC,KAAM,SAIJS,G,aAUJ,aAAsD,IAAD,gEAAJ,GAAnCC,EAAuC,EAAvCA,OAAQC,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,MAAmB,yBATrDF,OAASG,YAAgB,CACvBf,UAAWJ,IAQwC,KANrDiB,WAAaE,YAA0ClB,GAMF,KALrDmB,SAAWD,YAAgB,CACzBrB,aAAc,OAIqC,KAFrDoB,MAAQC,YAAmB,CAAC,gBAEyB,KAqBrDE,aAAe,YAKO,IAJpBhB,EAImB,EAJnBA,IACAC,EAGmB,EAHnBA,KAGmB,IAFnBH,cAEmB,MAFVN,EAAmBQ,GAET,MADnBD,iBACmB,MADPL,EACO,EACnB,EAAKkB,WAAWZ,GAAO,CACrBA,MACAC,OACAH,SACAC,cA9BEY,IACFM,KAAKN,OAASG,YAAWH,IAEvBC,IACFK,KAAKL,WAAaE,YAAWF,IAE3BC,IACFI,KAAKJ,MAAQC,YAAWD,I,sCAI5B,WAEE,MAAO,CACLF,OAAQM,KAAKN,OACbC,WAAYK,KAAKL,WACjBC,MAAOI,KAAKJ,S,6BAkBhB,SAAgBpB,UACPwB,KAAKL,WAAWnB,K,yBAGzB,WACE,OAAOyB,OAAO/C,KAAK8C,KAAKL,c,sCAG1B,SAAyBnB,EAAsBM,GAC7CkB,KAAKL,WAAWnB,GAAcM,UAAYA,I,sCAE5C,SAAyBN,GACvB,OAAOwB,KAAKL,WAAWnB,GAAcM,Y,mCAEvC,SAAsBN,GAEpB,OADYb,EAASqC,KAAKL,WAAWnB,GAAcM,a,gCAIrD,WACE,OAAOnB,EAASqC,KAAKN,OAAOZ,YAAc,K,mCAE5C,WACE,OAAOkB,KAAKN,OAAOZ,Y,mCAErB,SAAsBA,GACpBkB,KAAKN,OAAOZ,UAAYA,I,iBAG1B,WAC0B,IAAD,OACjBa,EAAaO,oBAAUF,KAAKL,YAAY,SAACQ,GAAD,OAC5C,EAAKC,sBAAsBD,EAAKpB,QAElC,OAAOsB,YAAY,2BAEZL,KAAKM,sBAFM,IAGdX,eAEFY,W,oBAIJ,WACwB,IAAD,OACfZ,EAAaO,oBAAUF,KAAKL,YAAY,SAACQ,GAAD,OAC5C,EAAKC,sBAAsBD,EAAKpB,QAE5ByB,EAAG,2BACJR,KAAKM,sBADD,IAEPX,eAEEc,EAAS,GACb,IACEA,EAAS,wBAA0BC,oBAAUF,EAAK,KAAM,KAAM,EAC9D,MAAOpC,GACPC,QAAQsC,MAAM,8BAA+BvC,GAE/C,OAAOqC,I,qCAGT,SAAwBjC,EAAsBoC,GAC5CZ,KAAKL,WAAWnB,GAAcK,OAAS+B,I,qCAGzC,SAAwBpC,GAAuB,IAAD,EAC5C,OAAO,UAAAwB,KAAKL,WAAWnB,UAAhB,eAA+BK,SAAU,K,kCAGlD,SAAqBL,GACnB,OAAOb,EAASqC,KAAKL,WAAWnB,GAAcK,U,yBAGhD,SAAYL,GACVwB,KAAKF,SAAStB,aAAeA,I,yBAG/B,WACE,OAAOwB,KAAKF,SAAStB,e,wBAGvB,SAAWqC,GACTb,KAAKJ,MAAMkB,KAAKD,K,0BAGlB,SAAaA,GACXb,KAAKJ,MAAMmB,OAAOf,KAAKJ,MAAMoB,QAAQH,GAAO,K,8BAG9C,WACE,OAAOb,KAAKJ,U,qCAjHbqB,K,kGAoDAA,K,sGAcAA,K,wEAmDGd,GAAOe,aAAaC,QAAQ,QAEnB,OAAI1B,EAAaU,GAAOiB,KAAKC,MAAMlB,IAAQ,I,2BC3UpDmB,GAAyB,SAAC,GAAmC,IAAjCX,EAAgC,EAAhCA,MAAOY,EAAyB,EAAzBA,mBACvC,OACE,uBAAKC,KAAK,QAAV,UACE,uDACA,+BAAMb,EAAMc,UACZ,yBAAQC,QAASH,EAAjB,2BA+CAI,GAAyB,CAC7BC,SAAU,CACRC,UAAW,YAEb,YAAa,CACXA,UAAW,eAoFAC,GAhF+BC,cAC5C,YAA6B,IAA1BC,EAAyB,EAAzBA,KAAMxD,EAAmB,EAAnBA,aACDyD,EAAYC,GAAQvC,WAAWnB,GAC/B+B,EAAQ2B,GAAQ3B,MAChB4B,EArBU,SAAC5B,EAAY/B,GAA0B,IAAD,EACpD4D,EAAmCnC,OAAO/C,MAC5C,UAAAqD,EAAMZ,WAAWnB,UAAjB,eAAgC2D,WAAY,IAG9C,OADAC,EAAMtB,UAAKuB,GACJD,EAgBYE,CAAY/B,EAAO0B,EAAUlD,KACxCqD,EA9BO,SAAC7B,EAAY/B,GAA0B,IAAD,EACjD4D,EAAmCnC,OAAO/C,MAC5C,UAAAqD,EAAMZ,WAAWnB,UAAjB,eAAgC4D,QAAS,IAG3C,OADAA,EAAMtB,UAAKuB,GACJD,EAyBSG,CAAShC,EAAO0B,EAAUlD,KAElCyD,EAAcN,GAAQO,wBAAwBjE,GAE9CkE,EAAWC,mBAAQ,WACvB,OAAOhF,EAAS6E,KACf,CAACA,IAEJ,OACE,eAAC,iBAAD,CACEI,kBAAmBtB,GACnBuB,QAAS,aAFX,SAME,gBAAC,IAAD,CACEC,MAAK,aACHC,gBAAiB,OACdpB,GAAkBK,IAEvBgB,EAAG,EALL,UAOE,eAAC,IAAD,CAASC,KAAK,KAAKC,GAAI,EAAvB,SACGjB,EAAUjD,OAEH,cAATgD,GACC,eAAC,IAAD,CAAMmB,EAAE,UAAUC,QAAS,EAA3B,SACGjB,EAASkB,KAAI,SAACC,GAAD,OACZ,eAAC,GAAD,CACEC,MAAOD,GAAW,UAClBE,SAAU,QACVC,UAAU,UAHZ,SAKE,eAAC,IAAD,CAAKT,EAAG,EAAR,SAAYN,GAAY,eAACA,EAAD,CAAUY,QAASA,aAKzC,aAATtB,GACC,eAAC,IAAD,CAAW0B,aAAc,EAAzB,SACGtB,EAAMiB,KAAI,SAACJ,GAAD,OACT,gBAAC,IAAD,WACE,gBAAC,IAAD,WACE,eAAC,IAAD,CAASA,KAAK,KAAKU,GAAI,EAAvB,SACGV,GAAQ,YAEX,eAAC,IAAD,OAEF,eAAC,IAAD,CAAgBU,GAAI,EAApB,SACE,eAAC,IAAD,CAAMP,QAAS,EAAf,SACGjB,EAASkB,KAAI,SAACC,GAAD,OACZ,eAAC,GAAD,CACEC,MAAOD,GAAW,UAClBE,SAAU,QACVC,UAAU,UAHZ,SAKE,eAAC,IAAD,CAAKT,EAAG,EAAR,SACGN,GACC,eAACA,EAAD,CAAUO,KAAMA,EAAMK,QAASA,+BAmBvDM,GAAgB,SAAC,GAAwC,IAAtCL,EAAqC,EAArCA,MAAOM,EAA8B,EAA9BA,SAAaC,EAAiB,oCACtDC,EAASC,YACb,CACEC,YAAa,iBACbC,GAAI,SAEN,CACED,YAAa,iBACbC,GAAI,aAIR,OACE,gBAAC,IAAD,yBACEC,QAAQ,KACRC,OAAO,YACPH,YAAaF,EAAOE,aAChBH,GAJN,cAME,eAAC,IAAD,CAAKd,EAAG,EAAGqB,aAAa,YAAYJ,YAAaF,EAAOE,YAAxD,SACE,eAAC,IAAD,CAAShB,KAAK,KAAd,SAAoBM,MAEtB,eAAC,IAAD,UAAMM,S,8EChLNS,GAAY,CAChBC,sBAAuBC,MACrB,SAACC,GAAD,OAASvC,GAAQqC,sBAAsBE,KACvC,KAEFC,yBAA0BF,MACxB,SAAChG,EAAciG,GAAf,OAAuBvC,GAAQwC,yBAAyBlG,EAAciG,KACtE,KAEFE,wBAAyBH,MACvB,SAAChG,EAAciG,GAAf,OAAuBvC,GAAQyC,wBAAwBnG,EAAciG,KACrE,MAQSG,IAFC1C,GAAQ2C,wBAEiB9C,cAAS,WAC9C,IAAM+C,EAAYC,mBAEZvG,GADQ0D,GAAQ2C,wBACD3C,GAAQ8C,eAHuB,EAIdC,mBAAS,UAJK,mBAI7CC,EAJ6C,KAIhCC,EAJgC,KAM9CC,EAAO,CAAC,UACV5G,IACF4G,EAAKtE,KAAKtC,GACV4G,EAAKtE,KAAK,WAGZuE,qBAAU,WACRF,EAAe3G,GAAgB,YAC9B,CAACA,IAEJ,IAAI8G,EAAkB,GAetB,MAboB,WAAhBJ,GACFI,EAAWC,MAAQrD,GAAQ2C,wBAC3BS,EAAWE,SAAWlB,GAAUC,uBACvBW,IAAgB1G,GACzB8G,EAAWC,MAAQrD,GAAQuD,yBAAyBjH,GACpD8G,EAAWE,SAAW,SAACf,GAAD,OACpBH,GAAUI,yBAAyBlG,EAAciG,KAC1B,WAAhBS,IACTI,EAAWC,MAAQrD,GAAQO,wBAAwBjE,GACnD8G,EAAWE,SAAW,SAACf,GAAD,OACpBH,GAAUK,wBAAwBnG,EAAciG,KAIlD,gBAAC,IAAD,CAAMiB,UAAU,SAASC,EAAE,OAAOxC,EAAE,OAApC,UACE,eAAC,IAAD,CACEwC,EAAE,OACFzB,GAAG,UACHG,aAAa,YACbJ,YAAY,iBAJd,SAME,eAAC,KAAD,CACE0B,EAAE,OACFC,YAAY,OACZC,MAAM,iBACNvC,QAAQ,WACRwC,MAAOV,EAAKpE,QAAQkE,GACpBa,SAAU,SAACD,GAAD,OAAWX,EAAeC,EAAKU,KAN3C,SAQE,eAAC,KAAD,CAASH,EAAE,OAAX,SACGP,EAAK/B,KAAI,SAAC2C,GAAD,OACR,eAAC,KAAD,CACEC,SAAS,KACTC,cAAc,YAEd/C,EAAE,OACF0C,MAAO,iBACPM,aAAa,OACbC,UAAW,CAAEP,MAAO,QAASxB,aAAc,mBAC3CgC,OAAQ,CAAEnC,GAAI,kBACdoC,OAAQ,CAAEC,UAAW,QATvB,SAWGP,GARIA,YAcf,eAAC,IAAD,CAAKL,EAAE,oBAAoBxC,EAAE,OAA7B,SACE,eAAC,gBAAD,CAEEqD,eAAgB,SAACC,GACf3B,EAAU4B,QAAUD,EACpBA,EAAOE,QAAQ,OAAQ,QAGvBC,YAAW,WACTH,EAAOI,YACN,IAELC,QAAS,CACPvG,MAAO,kBACPyB,KAAM,MACN+E,aAAa,EACbC,QAAS,GAEXC,UAAU,SACVC,QAAM,EACN3B,MAAOD,EAAWC,MAClBQ,SAAU,SAACoB,EAAGC,EAAI3C,GAAR,OAAgBa,EAAWE,SAASf,KAnBzCS,Y,iDC9ETmC,GAAiB,SAAC,GAAe,IAAbxB,EAAY,EAAZA,MACxB,OAAO,eAAC,IAAD,CAAM1C,EAAE,OAAOwC,EAAE,OAAOzB,GAAI2B,KAG/ByB,GAAc,CAAC,IAAM,IAAM,IAAM,IAAM,EAAG,EAAG,IAAM,IAAM,IAAM,KAC/DC,GAAc,CAClB,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAsFaC,GAnFe,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAAc,EAC/BzC,mBAAS,WADsB,mBAC9C0C,EAD8C,KACzCC,EADyC,KAG/C7D,EAASC,YACb,CACEE,GAAI,kBAEN,CACEA,GAAI,mBAIF2D,EAAgBC,OAAWH,GAE3BI,EAAkBZ,IAAEa,MAAMT,IAAa,SAACU,GAAD,OAC3CC,KAAKC,IAAIF,EAAYJ,EAAcO,IAAI,aAGnCC,EAAad,GAAYvG,QAAQ+G,GAUjCO,EARSf,GAAYlE,KAAI,SAAC4E,EAAWM,GACzC,IAAM1C,EAAQgC,EAAcW,IAAI,QAASP,GACnCQ,EAAQnB,GAAYiB,GAAKjB,GAAYe,GAC3C,OAAOI,GAAS,EACZ5C,EAAM6C,SAASD,GAAOd,MACtB9B,EAAM8C,YAAYF,GAAOd,SAGViB,QAAO,SAACpI,EAAKqF,EAAOC,GAMvC,OALc,IAAVA,EACFtF,EAAI,IAAMqF,EAEVrF,EAAY,IAARsF,GAAeD,EAEdrF,IACN,IAnCkD,EAqCvBqI,aAAazH,KAAKV,UAAU4H,EAAO,KAAM,IAA/DQ,EArC6C,EAqC7CA,UAAWC,EArCkC,EAqClCA,OAEnB,OACE,gBAAC,KAAD,CAAOtB,OAAQA,EAAQC,QAASA,EAASzE,KAAK,KAA9C,UACE,eAAC,KAAD,IACA,gBAAC,KAAD,WACE,eAAC,KAAD,mCACA,eAAC,KAAD,IACA,eAAC,KAAD,UACE,gBAAC,IAAD,CAAOG,QAAS,EAAhB,UACE,eAAC,IAAD,CACE4F,YAAa,SAACjM,GAAD,OAAOA,EAAEkM,kBACtBC,aAAa,KACbC,SAAS,SACT/E,OAAO,OACPF,GAAIH,EAAOG,GALb,SAOE,eAAC,KAAD,CACE+C,UAAU,cACVpB,MAAO8B,EACP5B,SAAU,gBAAG4B,EAAH,EAAGA,IAAH,OAAaC,EAAOD,IAC9ByB,cAAY,MAGhB,eAAC,IAAD,CAAMF,aAAa,KAAKC,SAAS,SAAjC,SACGlJ,OAAO/C,KAAKoL,GAAOjF,KAAI,SAACgG,GAAD,OACtB,eAAC,IAAD,CAAKC,KAAM,EAAX,SACE,eAAC,GAAD,CAAsBzD,MAAOyC,EAAMe,IAAvBA,eAMtB,gBAAC,KAAD,WACE,eAAC,KAAD,CAAQzD,YAAY,QAAQ2D,GAAI,EAAG7H,QAASqH,EAA5C,SACGD,EAAY,UAAY,SAE3B,eAAC,KAAD,CAAQlD,YAAY,OAAOlE,QAASgG,EAApC,6B,8BC3BK8B,GA/DoBzH,cAAS,YAAoC,IAAjC0F,EAAgC,EAAhCA,OAAQC,EAAwB,EAAxBA,QAAS+B,EAAe,EAAfA,SACxDC,EAAS3E,iBAAyB,MADqC,EAErDE,mBAAS,IAF4C,mBAEtEjG,EAFsE,KAEhE2K,EAFgE,OAGvD1E,mBAAS,IAH8C,mBAGtElG,EAHsE,KAGjE6K,EAHiE,KAKvEC,IAAqB3H,GAAQvC,WAAWZ,GAExC+K,IAAY9K,KAAUD,IAAQA,EAAIgL,SAAS,OAASF,EAE1D,OACE,gBAAC,KAAD,CACEG,gBAAiBN,EACjBjC,OAAQA,EACRwC,YAAU,EACVvC,QAASA,EACTzE,KAAK,KALP,UAOE,eAAC,KAAD,IACA,eAAC,KAAD,UACE,wBAAMwG,SAAU,SAAC1M,GAAD,OAAOA,EAAEkM,kBAAzB,UACE,eAAC,KAAD,8BACA,eAAC,KAAD,IACA,eAAC,KAAD,UACE,gBAAC,IAAD,WACE,eAAC,IAAD,6BACA,eAAC,KAAD,CACEiB,IAAKR,EACLnE,MAAOvG,EACP+G,SAAU,SAAChJ,GAAD,OAAO4M,EAAQ5M,EAAEoN,OAAO5E,QAClC6E,YAAY,qBAEd,eAAC,KAAD,CAAQzE,EAAG,IACX,eAAC,IAAD,4BACA,eAAC,KAAD,CACEJ,MAAOxG,EACPgH,SAAU,SAAChJ,GAAD,OAAO6M,EAAO7M,EAAEoN,OAAO5E,QACjC6E,YAAY,aAEd,gBAAC,IAAD,iCACqB,eAAC,KAAD,sDAIzB,gBAAC,KAAD,WACE,eAAC,KAAD,CACEC,KAAK,SACLzE,YAAY,QACZ2D,GAAI,EACJ7H,QAAS,kBAAM+H,EAAS,CAAEzK,OAAMD,SAChCuL,UAAWR,EALb,2BASA,eAAC,KAAD,CAAQlE,YAAY,OAAOlE,QAASgG,EAApC,kC,uGCxEC6C,GAAI,yCAAG,6BAAAC,EAAA,sEACAC,KAAMrC,IAAN,8DAHJ,0CAGI,qBADA,cACZsC,EADY,yBAIXA,EAAIvK,KAAKwK,OAJE,2CAAH,qDAOJC,GAAI,yCAAG,WAAOC,GAAP,UAAAL,EAAA,sDAClBM,QAAa,CACXC,OAAQ,CACNF,cAHc,2CAAH,sDCcjBG,aAAQ,WACgB9I,GAAQ+I,mBACZC,QAChBC,GAAiBjJ,GAAQ+I,uBAI7B,IAyGeG,GAzGkBrJ,cAAS,YAAoC,IAAjC0F,EAAgC,EAAhCA,OAAQC,EAAwB,EAAxBA,QAC7CgC,GADqE,EAAfD,SAC7C1E,iBAAyB,OADmC,EAEjDE,mBAAS,IAFwC,mBAEpErF,EAFoE,KAE7DyL,EAF6D,OAG/CpG,mBAAS,IAHsC,mBAGpEqG,EAHoE,KAG5DC,EAH4D,KAK3ElG,qBAAU,WACR8F,KAAmBK,KAAKH,KACvB,IAEH,IAAMI,EAAgBvJ,GAAQ+I,mBAExBS,EAAkBD,EAAc7C,QACpC,SAAC+C,EAAaC,EAAoBrD,GAKhC,OAJAoD,GAAG,WAAQC,EAAR,KACCrD,EAAIkD,EAAcP,OAAS,IAC7BS,GAAO,MAEFA,IAET,IAnByE,EAsB7C9C,aAC5BzH,KAAKV,UACH,CACEmL,KAAMH,EACNI,QAASJ,EACTK,KAAML,GAER,KACA,IARI5C,EAtBmE,EAsBnEA,UAAWC,EAtBwD,EAsBxDA,OAYnB,OACE,gBAAC,KAAD,CACEiB,gBAAiBN,EACjBjC,OAAQA,EACRwC,YAAU,EACVvC,QAASA,EACTzE,KAAK,KALP,UAOE,eAAC,KAAD,IACA,gBAAC,KAAD,WACE,eAAC,KAAD,kCACA,eAAC,KAAD,IACA,eAAC,KAAD,UACE,gBAAC,IAAD,CAAOG,QAAS,EAAhB,UACE,eAAC,KAAD,CACEgH,YAAY,YACZ7E,MAAO+F,EACPvF,SAAU,SAAChJ,GAAD,OAAOwO,EAAUxO,EAAEoN,OAAO5E,UAEtC,eAAC,IAAD,UACGkG,EAAcpI,KAAI,SAACuI,GAAD,OACjB,gBAAC,KAAD,CACE3I,KAAM,KAENiG,aAAa,KACb5F,QAAQ,UACRsC,YAAY,OALd,UAOE,eAAC,KAAD,UAAWgG,IACX,eAAC,KAAD,CACElK,QAAS,kBAAMQ,GAAQ8J,aAAaJ,QAPjCA,QAYX,eAAC,IAAD,CAAOjG,EAAG,IAAKsG,GAAI,EAAG7I,QAAS,EAAG8I,UAAU,OAA5C,SACGtM,EACEuM,QAAO,SAACtL,GAAD,OACNA,EAAKuL,OAAOC,cAActC,SAASuB,EAAOe,kBAE3CC,MAAM,EAAG,KACTjJ,KAAI,SAACxC,GAAD,OACH,eAAC,KAAD,CACE0L,UAAWd,EAAc1B,SAASlJ,EAAKuL,QACvCrG,SAAU,SAAChJ,GACLA,EAAEoN,OAAOqC,QACXtK,GAAQuK,WAAW5L,EAAKuL,QAExBlK,GAAQ8J,aAAanL,EAAKuL,SANhC,SAUGvL,EAAKuL,mBAMlB,gBAAC,KAAD,WACE,eAAC,KAAD,CAAQxG,YAAY,QAAQ2D,GAAI,EAAG7H,QAASqH,EAA5C,SACGD,EAAY,UAAY,SAE3B,eAAC,KAAD,CAAQlD,YAAY,OAAOlE,QAASgG,EAApC,+BCnFJvF,GAAW,CACfuK,KAAM,CACJC,KAAM,CACJC,WAAY,CACVC,gBAAiB,IACjBC,iBAAkB,IAGtBC,OAAQ,CACNH,WAAY,CACVC,gBAAiB,IACjBC,kBAAmB,KAIzBE,SAAU,CACRL,KAAM,CACJM,QAAS,EACTC,EAAG,GAELH,OAAQ,CACNE,QAAS,EACTC,EAAG,MAKHC,GAAoB,SAAC,GAOpB,IANLzL,EAMI,EANJA,QACA0L,EAKI,EALJA,cACAC,EAII,EAJJA,aACAC,EAGI,EAHJA,gBACA7F,EAEI,EAFJA,OACG3D,EACC,qFACJ,OACE,gBAAC,IAAD,yBAAOV,QAAS,GAAOU,GAAvB,cACE,eAAC,IAAD,CAASyJ,UAAU,OAAOC,MAAO/F,EAAS,YAAc,YAAxD,SACE,eAAC,IAAD,CACE7B,YAAY,aACZC,MAAM,iBACNnE,QAASA,EACTwC,GAAG,UACHuJ,aAAW,YACXnK,QAAQ,UACRoK,KAAMjG,EAAS,eAAC,IAAD,IAAgB,eAAC,IAAD,QAGnC,eAACkG,EAAA,EAAD,UACGlG,GACC,gBAACjK,EAAA,EAAOE,IAAR,CACEyE,SAAUA,GAASuK,KACnB5J,MAAO,CAAE8K,WAAY,OACrBC,QAAQ,SACRC,QAAS,OACTC,KAAM,SALR,UAOE,eAACvQ,EAAA,EAAOE,IAAR,CACEyE,SAAUA,GAAS6K,SACnBlK,MAAO,CAAEkL,QAAS,SAFpB,SAIE,eAAC,IAAD,CAAST,UAAU,OAAOC,MAAM,gBAAhC,SACE,eAAC,IAAD,CACElK,QAAQ,UACRsC,YAAY,aACZC,MAAM,iBACN3B,GAAG,UACHxC,QAAS0L,EACTK,aAAW,SACXC,KAAM,eAAC,IAAD,UAIZ,eAAClQ,EAAA,EAAOE,IAAR,CACEyE,SAAUA,GAAS6K,SACnBlK,MAAO,CAAEkL,QAAS,SAFpB,SAIE,eAAC,IAAD,CAAST,UAAU,OAAOC,MAAM,aAAhC,SACE,eAAC,IAAD,CACElK,QAAQ,UACRsC,YAAY,aACZC,MAAM,iBACN3B,GAAG,UACHxC,QAAS2L,EACTI,aAAW,QACXC,KAAM,eAAC,IAAD,UAIZ,eAAClQ,EAAA,EAAOE,IAAR,CACEyE,SAAUA,GAAS6K,SACnBlK,MAAO,CAAEkL,QAAS,SAFpB,SAIE,eAAC,IAAD,CAAST,UAAU,OAAOC,MAAM,sBAAhC,SACE,eAAC,IAAD,CACElK,QAAQ,UACRsC,YAAY,aACZC,MAAM,iBACN3B,GAAG,UACHxC,QAAS4L,EACTG,aAAW,WACXC,KAAM,eAAC,IAAD,oBAYxB1C,aACE,WACE9J,aAAa+M,QAAQ,OAAQ7M,KAAKV,UAAUwB,GAAQ/B,SAEtD,CACE+N,MAAO,MAIX,IA0KeC,GA1KHpM,cAAS,WAAO,IAAD,EACakD,oBAAS,GADtB,mBAClBmJ,EADkB,KACLC,EADK,KAEnBC,EAAS,CACbzI,MAAO0I,cACPtM,UAAWsM,cACX1N,KAAM0N,eALiB,EAOcC,cAA/BC,EAPiB,EAOjBA,UAAWC,EAPM,EAONA,gBAEbC,GADQzM,GAAQ3B,MACPyD,YAAkB,iBAAkB,kBAEnD,OACE,gBAAC4K,EAAA,EAAD,CAAchC,WAAY,CAAEvC,KAAM,SAAUwE,UAAW,IAAKC,QAAS,IAArE,UACE,gBAAC,IAAD,CAAMnJ,EAAE,OAAR,UACE,gBAAC,IAAD,CAAMD,UAAU,SAASuB,UAAU,UAAUqC,KAAM,EAAnD,UACE,gBAAC,IAAD,CACErC,UAAU,SACVtB,EAAE,OACFoJ,MAAM,SACNC,QAAQ,gBACR/C,GAAI,EACJ5H,aAAa,YACbJ,YAAY,iBACZC,GAAG,UACH2B,MAAM,QATR,UAWE,eAAC,IAAD,CAAMI,SAAS,KAAKgJ,WAAW,OAA/B,+BAGA,eAAC,IAAD,CAAK3F,KAAM,IACX,gBAAC,IAAD,CACEnG,EAAE,OACF+L,QAAQ,OACRC,WAAW,SACXC,IAAI,WACJC,MAAOjB,EAAc,EAAI,OACzBxB,WAAW,YANb,UAQE,eAAC,IAAD,CAAW3G,SAAS,KAAKqJ,GAAI,EAAGC,QAAQ,mBAAxC,uBAGA,eAAC,IAAD,CACEjS,GAAG,mBACHsI,YAAY,QACZ2G,UAAyB,SAAdkC,EACX1I,SAAU,SAAChJ,GACT2R,aAKR,gBAAC,IAAD,CAAKzH,UAAU,OAAOqC,KAAM,EAAG8F,IAAI,WAAWlD,UAAU,OAAxD,UACE,gBAAC,IAAD,CACEgD,QAAShN,GAAQ8C,cAAgB,OAAS,OAC1CwK,QAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5BpM,QAAS,EACTJ,EAAG,EAJL,UAMGd,GAAQuN,cAAcpM,KAAI,SAAC7E,GAAD,OACzB,eAAC,IAAD,CAEEkR,OAAO,QACPxL,GAAIyK,EACJxF,SAAS,SACThF,QAAQ,KACRwL,OAAO,UACPjO,QAAS,kBAAMQ,GAAQ0N,YAAYpR,IACnCoO,WAAW,WACXvG,OAAQ,CAAExE,UAAW,eAAgB0E,UAAW,MAChDA,UAAW,KAVb,SAYE,eAAC,GAAD,CACEvE,KACEE,GAAQ8C,gBAAkBxG,EACtB,WACA,YAENA,aAAcA,KAjBXA,MAqBT,eAAC,IAAD,CACEkR,OAAO,QACPxL,GAAIyK,EACJxF,SAAS,SACThF,QAAQ,KACRwL,OAAO,UACPjO,QAAS4M,EAAOrM,UAAU4N,OAC1BjD,WAAW,WACXvG,OAAQ,CAAExE,UAAW,eAAgB0E,UAAW,MAChDA,UAAW,KATb,SAWE,gBAAC,IAAD,CAAQuJ,cAAc,SAASnK,EAAE,OAAOM,SAAS,KAAjD,UACE,eAAC,IAAD,CAAMA,SAAS,KAAKgJ,WAAW,OAA/B,6BAGA,eAAC,IAAD,YAIL/M,GAAQ8C,eACP,gBAAC,IAAD,CACEoK,IAAI,WACJW,IAAK,EACLV,MAAO,EACPW,OAAQ,EACRC,KAAM,EACNP,OAAO,OACPxL,GAAIyK,EACJzC,UAAU,OARZ,UAUE,eAAC,GAAD,CACElK,KAAK,WACLxD,aAAc0D,GAAQ8C,gBAExB,eAAC,IAAD,CACEoK,IAAI,WACJW,IAAI,OACJV,MAAM,OACN3N,QAAS,kBAAMQ,GAAQ0N,YAAY,kBAM7C,eAAC,EAAD,CACE3I,UAAU,UACViJ,WAAW,YACXjM,YAAY,WACZd,EAAE,QACF2K,QAAS,CACPqC,YAAa/B,EAAc,EAAI,UANnC,SASE,eAACxJ,GAAD,SAGJ,eAAC,GAAD,CACE6C,OAAQ6G,EAAOzI,MAAM4B,OACrBC,QAAS4G,EAAOzI,MAAM6B,UAExB,eAAC,GAAD,CACED,OAAQ6G,EAAOzN,KAAK4G,OACpBC,QAAS4G,EAAOzN,KAAK6G,UAEvB,eAAC,GAAD,CACED,OAAQ6G,EAAOrM,UAAUwF,OACzBC,QAAS4G,EAAOrM,UAAUyF,QAC1B+B,SAAU,SAACtJ,GACT+B,GAAQnC,aAAaI,GACrBmO,EAAOrM,UAAUyF,aAGrB,eAAC,GAAD,CACEhG,QAAS,kBAAM2M,GAAe,SAACrL,GAAD,OAAQA,MACtCoK,cAAekB,EAAOzI,MAAMgK,OAC5BxC,aAAciB,EAAOzN,KAAKgP,OAC1BvC,gBAAiB,WACf8C,KAAalO,GAAQmO,SAAU,aAEjC5I,OAAQ2G,EACRgB,IAAI,QACJW,IAAK,OACLV,MAAO,OACPiB,OAAQ,Y,8BC9TDC,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBjF,MAAK,YAAkD,IAA/CkF,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCSRO,I,OAAsB,SAAC,GAAmC,IAAjCpQ,EAAgC,EAAhCA,MAAOY,EAAyB,EAAzBA,mBAC9ByP,EAAQC,eAiCd,OA/BA5L,qBAAU,WAOR,IAAM6L,EAAUF,EAAM,CACpBG,SAAU,IACVC,YAAY,EACZvS,OAAQ,kBACN,gBAAC,IAAD,CAAKgH,MAAM,iBAAiB7C,EAAG,EAAGkB,GAAG,UAArC,sDAC4C,IAC1C,eAAC,KAAD,CAAM0B,YAAY,aAAlB,SAAgCjF,EAAMc,UAFxC,mDAGyC,IACvC,eAAC,KAAD,CACE6B,QAAQ,OACRsC,YAAY,QACZlE,QAAS,kBAAMH,KAHjB,8BAWN,OAAO,WACD2P,GAASF,EAAMK,MAAMH,MAE1B,IAEI,OAGH5P,GAAyB,SAAC,GAAmC,IAAjCX,EAAgC,EAAhCA,MAAOY,EAAyB,EAAzBA,mBACvC,OACE,gBAAC,KAAD,WACE,eAAC,GAAD,IACA,eAAC,GAAD,CAAYZ,MAAOA,EAAOY,mBAAoBA,QAK9C+P,GAAYvP,cAAS,WACzB,IAAMxB,EAAQ2B,GAAQ3B,MACtB,OACE,eAAC,iBAAD,CAAeqC,kBAAmBtB,GAAlC,SACE,eAAC,KAAD,CAAgBf,MAAOA,EAAvB,SACE,eAAC,GAAD,WAMRgR,IAAS1S,OACP,gBAAC,IAAM2S,WAAP,WACE,eAAC,KAAD,CAAiBC,iBAAkB,UACnC,eAACH,GAAD,OAEFI,SAASC,eAAe,SAM1BpB,O","file":"static/js/main.6012f875.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 204;","import { HTMLChakraProps, chakra } from \"@chakra-ui/react\";\nimport { motion, HTMLMotionProps } from \"framer-motion\";\n\ntype Merge<P, T> = Omit<P, keyof T> & T;\ntype MotionBoxProps = Merge<HTMLChakraProps<\"div\">, HTMLMotionProps<\"div\">>;\nconst MotionBox: React.FC<MotionBoxProps> = motion(chakra.div);\n\nexport default MotionBox;\n","import * as Chakra from \"@chakra-ui/react\";\nimport * as Babel from \"@babel/standalone\";\nimport * as React from \"react\";\n// @ts-ignore\nimport safeEval from \"safer-eval/lib/browser\";\n\nconst evaluate = (code: string) => {\n  \"use strict\";\n  code = `(${code})`;\n  try {\n    let transpiled = Babel.transform(code, {\n      presets: [\"env\", \"react\"],\n      sourceType: \"script\",\n    }).code;\n    const result = transpiled\n      ? safeEval(transpiled, { ...Chakra, Chakra, React, window })\n      : null;\n    return result;\n  } catch (err) {\n    console.log(err);\n    return null;\n  }\n};\n\nexport default evaluate;\n","import { computed, observable } from \"mobx\";\nimport { theme, extendTheme, ChakraTheme } from \"@chakra-ui/react\";\nimport { ComponentData } from \"./types\";\nimport { mapValues } from \"lodash\";\nimport evaluate from \"./evaluate\";\n// @ts-ignore\nimport { stringify } from \"javascript-stringify\";\n\nconst getDefaultRenderer = (\n  componentKey: string\n) => `// Specify what to render for each size and variant\n({ size, variant }) => {\n  const sx = useStyleConfig('${componentKey}', { size, variant })\n\n  return (\n    <Box sx={sx}>\n      Hello\n    </Box>\n  )\n}`;\nconst DEFAULT_COMPONENT_THEME = `// Specify theme overrides for this component\n{\n  // style object for base or default style\n  baseStyle: {},\n  // styles for different sizes (\"sm\", \"md\", \"lg\")\n  sizes: {},\n  // styles for different visual variants (\"outline\", \"solid\")\n  variants: {},\n  // override default props on this component\n  defaultProps: {\n    size: \"md\",\n    colorScheme: \"brand\"\n  },\n}`;\nconst DEFAULT_GLOBAL_THEME = `// Specify global theme overrides\n{\n  colors: {\n    brand: {\n      50: '#f5e3ff',\n      100: '#d8b2ff',\n      200: '#bd80ff',\n      300: '#a34dff',\n      400: '#881bfe',\n      500: '#6f02e5',\n      600: '#5600b3',\n      700: '#3e0081',\n      800: '#25004f',\n      900: '#0e001f',\n    },\n     gray: {\n      50: \"#f1f3fb\",\n      100: \"#d3d5dc\",\n      200: \"#b6b8be\",\n      300: \"#9a9ba1\",\n      400: \"#7f8084\",\n      500: \"#656669\",\n      600: \"#4c4c4f\",\n      700: \"#343536\",\n      800: \"#1e1e1f\",\n      900: \"#030304\"\n    }\n  },\n  fonts: {\n    body: \"Inconsolata, sans-serif\",\n    heading: \"Inconsolata, serif\",\n    mono: \"Inconsolata, monospace\",\n  },\n  styles: {\n    global: ({ colorMode }) => ({\n      body: {\n        bg: colorMode === \"dark\" ? \"gray.800\" : \"gray.50\"    \n      },\n      _focusVisible: {\n        boxShadow: \"0 0 0 3px #d8b2ff !important\"\n      }\n    }),\n  },\n  fontSizes: {},\n  fontWeights: {},\n  lineHeights: {},\n  letterSpacings: {},\n}`;\n\nconst DEFAULT_COMPONENTS: Record<string, ComponentData> = {\n  Alert: {\n    render: `({ size, variant }) => (\n  <Alert size={size} variant={variant} colorScheme=\"brand\">\n    <AlertIcon />\n    <AlertTitle mr={2}>Hello!</AlertTitle>\n    <AlertDescription>Just saying hi.</AlertDescription>\n  </Alert>\n)`,\n    overrides: DEFAULT_COMPONENT_THEME,\n    key: \"Alert\",\n    name: \"Alerts\",\n  },\n  Badge: {\n    render: `({ size, variant }) => (\n  <Badge \n    size={size} \n    variant={variant} \n  >\n    Hello\n  </Badge>\n)`,\n    overrides: DEFAULT_COMPONENT_THEME,\n    key: \"Badge\",\n    name: \"Badges\",\n  },\n  Button: {\n    render: `({ size, variant }) => (\n  <Button \n    size={size} \n    variant={variant}\n  >\n    Hello\n  </Button>\n)`,\n    overrides: DEFAULT_COMPONENT_THEME,\n    key: \"Button\",\n    name: \"Buttons\",\n  },\n  Checkbox: {\n    render: `({ size, variant }) => (\n  <Checkbox \n    size={size} \n    variant={variant} \n  />\n)`,\n    overrides: DEFAULT_COMPONENT_THEME,\n    key: \"Checkbox\",\n    name: \"Checkboxes\",\n  },\n  Heading: {\n    render: `({ size, variant }) => (\n  <Heading \n    size={size} \n    variant={variant} \n  >\n    Hello\n  </Heading>\n)`,\n    overrides: DEFAULT_COMPONENT_THEME,\n    key: \"Heading\",\n    name: \"Headings\",\n  },\n  Input: {\n    render: `({ size, variant }) => (\n  <Input \n    size={size} \n    variant={variant} \n    placeholder=\"hello...\" \n  />\n)`,\n    overrides: DEFAULT_COMPONENT_THEME,\n    key: \"Input\",\n    name: \"Inputs\",\n  },\n  Spinner: {\n    render: `({ size, variant }) => (\n  <Spinner\n    size={size}\n    variant={variant}\n    thickness=\"4px\"\n    speed=\"0.65s\"\n  />\n)`,\n    overrides: `// Specify theme overrides for this component\n{\n  // style object for base or default style\n  baseStyle: {\n    color: \"brand.300\"\n  },\n  // styles for different sizes (\"sm\", \"md\", \"lg\")\n  sizes: {},\n  // styles for different visual variants (\"outline\", \"solid\")\n  variants: {},\n  // override default props on this component\n  defaultProps: {\n    size: \"md\",\n  },\n}`,\n    key: \"Spinner\",\n    name: \"Spinners\",\n  },\n  Tabs: {\n    render: `({ size, variant }) => (\n  <Tabs size={size} variant={variant}>\n    <TabList>\n      <Tab>One</Tab>\n      <Tab>Two</Tab>\n      <Tab>Three</Tab>\n    </TabList>\n  </Tabs>\n)`,\n    overrides: DEFAULT_COMPONENT_THEME,\n    key: \"Tabs\",\n    name: \"Tabs\",\n  },\n  Tag: {\n    render: `({ size, variant }) => (\n  <Tag \n    size={size} \n    variant={variant} \n  >\n    Hello\n  </Tag>\n)`,\n    overrides: DEFAULT_COMPONENT_THEME,\n    key: \"Tag\",\n    name: \"Tags\",\n  },\n};\n\nclass ThemeManager {\n  global = observable<any>({\n    overrides: DEFAULT_GLOBAL_THEME,\n  });\n  components = observable<Record<string, ComponentData>>(DEFAULT_COMPONENTS);\n  selected = observable<any>({\n    componentKey: null,\n  });\n  fonts = observable<string>([\"Inconsolata\"]);\n\n  constructor({ global, components, fonts }: any = {}) {\n    if (global) {\n      this.global = observable(global);\n    }\n    if (components) {\n      this.components = observable(components);\n    }\n    if (fonts) {\n      this.fonts = observable(fonts);\n    }\n  }\n\n  @computed\n  get data() {\n    return {\n      global: this.global,\n      components: this.components,\n      fonts: this.fonts,\n    };\n  }\n\n  addComponent = ({\n    key,\n    name,\n    render = getDefaultRenderer(key),\n    overrides = DEFAULT_COMPONENT_THEME,\n  }: ComponentData) => {\n    this.components[key] = {\n      key,\n      name,\n      render,\n      overrides,\n    };\n  };\n\n  removeComponent(componentKey: string) {\n    delete this.components[componentKey];\n  }\n\n  get componentKeys() {\n    return Object.keys(this.components);\n  }\n\n  setRawComponentOverrides(componentKey: string, overrides: string) {\n    this.components[componentKey].overrides = overrides;\n  }\n  getRawComponentOverrides(componentKey: string): string {\n    return this.components[componentKey].overrides;\n  }\n  getComponentOverrides(componentKey: string): any {\n    const val = evaluate(this.components[componentKey].overrides);\n    return val;\n  }\n\n  getGlobalOverrides() {\n    return evaluate(this.global.overrides) || {};\n  }\n  getRawGlobalOverrides() {\n    return this.global.overrides;\n  }\n  setRawGlobalOverrides(overrides: string) {\n    this.global.overrides = overrides;\n  }\n\n  @computed\n  get theme(): ChakraTheme {\n    const components = mapValues(this.components, (data) =>\n      this.getComponentOverrides(data.key)\n    );\n    return extendTheme(\n      {\n        ...this.getGlobalOverrides(),\n        components,\n      },\n      theme\n    );\n  }\n\n  @computed\n  get themeStr(): string {\n    const components = mapValues(this.components, (data) =>\n      this.getComponentOverrides(data.key)\n    );\n    const obj = {\n      ...this.getGlobalOverrides(),\n      components,\n    };\n    let result = \"\";\n    try {\n      result = \"export const theme = \" + stringify(obj, null, 2) || \"\";\n    } catch (err) {\n      console.error(\"Unable to export theme file\", err);\n    }\n    return result;\n  }\n\n  setRawComponentRenderer(componentKey: string, renderer: string) {\n    this.components[componentKey].render = renderer;\n  }\n\n  getRawComponentRenderer(componentKey: string) {\n    return this.components[componentKey]?.render || \"\";\n  }\n\n  getComponentRenderer(componentKey: string) {\n    return evaluate(this.components[componentKey].render);\n  }\n\n  setSelected(componentKey: string | null) {\n    this.selected.componentKey = componentKey;\n  }\n\n  getSelected() {\n    return this.selected.componentKey;\n  }\n\n  selectFont(font: string) {\n    this.fonts.push(font);\n  }\n\n  unselectFont(font: string) {\n    this.fonts.splice(this.fonts.indexOf(font), 1);\n  }\n\n  getSelectedFonts() {\n    return this.fonts;\n  }\n}\n\nconst data = localStorage.getItem(\"data\");\n\nexport default new ThemeManager(data ? JSON.parse(data) : {});\n","import React, { useState, FC, useMemo } from \"react\";\nimport {\n  Accordion,\n  AccordionItem,\n  Box,\n  Heading,\n  HStack,\n  Stack,\n  Wrap,\n  AccordionButton,\n  AccordionIcon,\n  AccordionPanel,\n  ChakraProvider,\n  useColorModeValue,\n  useColorModePreference,\n} from \"@chakra-ui/react\";\nimport { ComponentData } from \"./types\";\nimport manager from \"./ThemeManager\";\nimport { observer } from \"mobx-react-lite\";\nimport { motion, Variants } from \"framer-motion\";\nimport MotionBox from \"./MotionBox\";\nimport evaluate from \"./evaluate\";\nimport { ErrorBoundary } from \"react-error-boundary\";\n\nconst ErrorFallback: FC<any> = ({ error, resetErrorBoundary }) => {\n  return (\n    <div role=\"alert\">\n      <p>Something went wrong:</p>\n      <pre>{error.message}</pre>\n      <button onClick={resetErrorBoundary}>Try again</button>\n    </div>\n  );\n};\n\ninterface ComponentItemProps {\n  mode: \"grid-item\" | \"list-item\" | \"expanded\";\n  componentKey: string;\n}\n\n// interface SizeVariant {\n//   size: string | undefined;\n//   variant: string | undefined;\n// }\n\n// const enumerateSizeVariants = (\n//   sizes: Array<string | undefined>,\n//   variants: Array<string | undefined>\n// ): SizeVariant[] => {\n//   let sizeVariants: SizeVariant[] = [];\n//   sizes.forEach((size) => {\n//     variants.forEach((variant) => {\n//       sizeVariants.push({\n//         size,\n//         variant,\n//       });\n//     });\n//   });\n//   return sizeVariants;\n// };\n\nconst getSizes = (theme: any, componentKey: string) => {\n  let sizes: Array<string | undefined> = Object.keys(\n    theme.components[componentKey]?.sizes || {}\n  );\n  sizes.push(undefined);\n  return sizes;\n};\n\nconst getVariants = (theme: any, componentKey: string) => {\n  let sizes: Array<string | undefined> = Object.keys(\n    theme.components[componentKey]?.variants || {}\n  );\n  sizes.push(undefined);\n  return sizes;\n};\n\nconst animationVariants: any = {\n  expanded: {\n    transform: \"scale(1)\",\n  },\n  \"grid-item\": {\n    transform: \"scale(.75)\",\n  },\n};\n\nconst ComponentItem: FC<ComponentItemProps> = observer(\n  ({ mode, componentKey }) => {\n    const component = manager.components[componentKey];\n    const theme = manager.theme;\n    const variants = getVariants(theme, component.key);\n    const sizes = getSizes(theme, component.key);\n\n    const rendererStr = manager.getRawComponentRenderer(componentKey);\n\n    const Renderer = useMemo(() => {\n      return evaluate(rendererStr);\n    }, [rendererStr]);\n\n    return (\n      <ErrorBoundary\n        FallbackComponent={ErrorFallback}\n        onReset={() => {\n          // reset the state of your app so the error doesn't happen again\n        }}\n      >\n        <Stack\n          style={{\n            transformOrigin: \"0 0\",\n            ...animationVariants[mode],\n          }}\n          p={8}\n        >\n          <Heading size=\"xl\" pb={2}>\n            {component.name}\n          </Heading>\n          {mode === \"grid-item\" && (\n            <Wrap w=\"133.33%\" spacing={4}>\n              {variants.map((variant) => (\n                <Card\n                  title={variant || \"default\"}\n                  minWidth={\"165px\"}\n                  alignSelf=\"stretch\"\n                >\n                  <Box p={2}>{Renderer && <Renderer variant={variant} />}</Box>\n                </Card>\n              ))}\n            </Wrap>\n          )}\n          {mode === \"expanded\" && (\n            <Accordion defaultIndex={0}>\n              {sizes.map((size) => (\n                <AccordionItem>\n                  <AccordionButton>\n                    <Heading size=\"md\" py={2}>\n                      {size || \"default\"}\n                    </Heading>\n                    <AccordionIcon />\n                  </AccordionButton>\n                  <AccordionPanel py={4}>\n                    <Wrap spacing={4}>\n                      {variants.map((variant) => (\n                        <Card\n                          title={variant || \"default\"}\n                          minWidth={\"165px\"}\n                          alignSelf=\"stretch\"\n                        >\n                          <Box p={2}>\n                            {Renderer && (\n                              <Renderer size={size} variant={variant} />\n                            )}\n                          </Box>\n                        </Card>\n                      ))}\n                    </Wrap>\n                  </AccordionPanel>\n                </AccordionItem>\n              ))}\n            </Accordion>\n          )}\n        </Stack>\n      </ErrorBoundary>\n    );\n  }\n);\n\nexport default ComponentItem;\n\nconst Card: FC<any> = ({ title, children, ...otherProps }) => {\n  const styles = useColorModeValue(\n    {\n      borderColor: \"blackAlpha.400\",\n      bg: \"white\",\n    },\n    {\n      borderColor: \"whiteAlpha.400\",\n      bg: \"gray.700\",\n    }\n  );\n\n  return (\n    <Box\n      rounded=\"lg\"\n      border=\"1px solid\"\n      borderColor={styles.borderColor}\n      {...otherProps}\n    >\n      <Box p={2} borderBottom=\"1px solid\" borderColor={styles.borderColor}>\n        <Heading size=\"sm\">{title}</Heading>\n      </Box>\n      <Box>{children}</Box>\n    </Box>\n  );\n};\n","import React, { useRef, useState, FC, useEffect } from \"react\";\nimport \"codemirror/lib/codemirror.css\";\nimport \"codemirror/mode/javascript/javascript.js\";\nimport \"codemirror/mode/jsx/jsx.js\";\nimport \"codemirror/mode/css/css.js\";\nimport \"codemirror/theme/material-darker.css\";\nimport { UnControlled as Codemirror } from \"react-codemirror2\";\nimport { Editor as CodeMirrorEditor, EditorConfiguration } from \"codemirror\";\nimport { Box, Flex, Tabs, Tab, TabList } from \"@chakra-ui/react\";\nimport { observer } from \"mobx-react-lite\";\nimport manager from \"./ThemeManager\";\nimport debounce from \"lodash/debounce\";\n\nconst debounced = {\n  setRawGlobalOverrides: debounce(\n    (val) => manager.setRawGlobalOverrides(val),\n    1000\n  ),\n  setRawComponentOverrides: debounce(\n    (componentKey, val) => manager.setRawComponentOverrides(componentKey, val),\n    1000\n  ),\n  setRawComponentRenderer: debounce(\n    (componentKey, val) => manager.setRawComponentRenderer(componentKey, val),\n    1000\n  ),\n};\n\ninterface EditorProps {}\n\nconst value = manager.getRawGlobalOverrides();\n\nexport const Editor: FC<EditorProps> = observer(() => {\n  const editorRef = useRef<CodeMirrorEditor>();\n  const value = manager.getRawGlobalOverrides();\n  const componentKey = manager.getSelected();\n  const [selectedTab, setSelectedTab] = useState(\"global\");\n\n  const tabs = [\"global\"];\n  if (componentKey) {\n    tabs.push(componentKey);\n    tabs.push(\"render\");\n  }\n\n  useEffect(() => {\n    setSelectedTab(componentKey || \"global\");\n  }, [componentKey]);\n\n  let editorVals: any = {};\n\n  if (selectedTab === \"global\") {\n    editorVals.value = manager.getRawGlobalOverrides();\n    editorVals.setValue = debounced.setRawGlobalOverrides;\n  } else if (selectedTab === componentKey) {\n    editorVals.value = manager.getRawComponentOverrides(componentKey);\n    editorVals.setValue = (val: string) =>\n      debounced.setRawComponentOverrides(componentKey, val);\n  } else if (selectedTab === \"render\") {\n    editorVals.value = manager.getRawComponentRenderer(componentKey);\n    editorVals.setValue = (val: string) =>\n      debounced.setRawComponentRenderer(componentKey, val);\n  }\n\n  return (\n    <Flex direction=\"column\" h=\"100%\" w=\"100%\">\n      <Flex\n        h=\"64px\"\n        bg=\"#212121\"\n        borderBottom=\"1px solid\"\n        borderColor=\"whiteAlpha.200\"\n      >\n        <Tabs\n          h=\"100%\"\n          colorScheme=\"blue\"\n          color=\"whiteAlpha.800\"\n          variant=\"unstyled\"\n          index={tabs.indexOf(selectedTab)}\n          onChange={(index) => setSelectedTab(tabs[index])}\n        >\n          <TabList h=\"100%\">\n            {tabs.map((tab) => (\n              <Tab\n                fontSize=\"xs\"\n                textTransform=\"uppercase\"\n                key={tab}\n                w=\"92px\"\n                color={\"whiteAlpha.700\"}\n                marginBottom=\"-1px\"\n                _selected={{ color: \"white\", borderBottom: \"1px solid white\" }}\n                _hover={{ bg: \"whiteAlpha.100\" }}\n                _focus={{ boxShadow: \"none\" }}\n              >\n                {tab}\n              </Tab>\n            ))}\n          </TabList>\n        </Tabs>\n      </Flex>\n      <Box h=\"calc(100% - 64px)\" w=\"100%\">\n        <Codemirror\n          key={selectedTab}\n          editorDidMount={(editor) => {\n            editorRef.current = editor;\n            editor.setSize(\"100%\", \"100%\");\n            // Hacky, but needed to get editor\n            // to size properly after mount\n            setTimeout(() => {\n              editor.refresh();\n            }, 0);\n          }}\n          options={{\n            theme: \"material-darker\",\n            mode: \"jsx\",\n            lineNumbers: true,\n            tabSize: 2,\n          }}\n          className=\"editor\"\n          detach\n          value={editorVals.value}\n          onChange={(_, __, val) => editorVals.setValue(val)}\n        />\n      </Box>\n    </Flex>\n  );\n});\n","import React, { FC, useState } from \"react\";\nimport Hue from \"react-color/lib/components/hue/Hue\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalCloseButton,\n  ModalBody,\n  ModalFooter,\n  Button,\n  Box,\n  Flex,\n  Stack,\n  Text,\n  useClipboard,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport * as chroma from \"chroma-js\";\nimport { ChromePicker } from \"react-color\";\nimport _ from \"lodash\";\n\nconst Color: FC<any> = ({ color }) => {\n  return <Flex w=\"100%\" h=\"48px\" bg={color}></Flex>;\n};\n\nconst SATURATIONS = [0.32, 0.16, 0.08, 0.04, 0, 0, 0.04, 0.08, 0.16, 0.32];\nconst LIGHTNESSES = [\n  0.95,\n  0.85,\n  0.75,\n  0.65,\n  0.55,\n  0.45,\n  0.35,\n  0.25,\n  0.15,\n  0.05,\n];\n\nconst PaletteModal: FC<any> = ({ isOpen, onClose }) => {\n  const [hex, setHex] = useState(\"#A600FF\");\n\n  const styles = useColorModeValue(\n    {\n      bg: \"blackAlpha.100\",\n    },\n    {\n      bg: \"whiteAlpha.100\",\n    }\n  );\n\n  const selectedColor = chroma.hex(hex);\n\n  const targetLightness = _.minBy(LIGHTNESSES, (lightness) =>\n    Math.abs(lightness - selectedColor.get(\"hsl.l\"))\n  ) as number;\n\n  const colorIndex = LIGHTNESSES.indexOf(targetLightness);\n\n  const colors = LIGHTNESSES.map((lightness, i) => {\n    const color = selectedColor.set(\"hsl.l\", lightness);\n    const delta = SATURATIONS[i] - SATURATIONS[colorIndex];\n    return delta >= 0\n      ? color.saturate(delta).hex()\n      : color.desaturate(-delta).hex();\n  });\n\n  const scale = colors.reduce((obj, color, index) => {\n    if (index === 0) {\n      obj[50] = color;\n    } else {\n      obj[index * 100] = color;\n    }\n    return obj;\n  }, {} as any);\n\n  const { hasCopied, onCopy } = useClipboard(JSON.stringify(scale, null, 2));\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose} size=\"lg\">\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Create a Color Scale</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <Stack spacing={5}>\n            <Box\n              onDragStart={(e) => e.preventDefault()}\n              borderRadius=\"md\"\n              overflow=\"hidden\"\n              border=\"none\"\n              bg={styles.bg}\n            >\n              <ChromePicker\n                className=\"colorpicker\"\n                color={hex}\n                onChange={({ hex }) => setHex(hex)}\n                disableAlpha\n              />\n            </Box>\n            <Flex borderRadius=\"lg\" overflow=\"hidden\">\n              {Object.keys(scale).map((colorKey) => (\n                <Box flex={1}>\n                  <Color key={colorKey} color={scale[colorKey]} />\n                </Box>\n              ))}\n            </Flex>\n          </Stack>\n        </ModalBody>\n        <ModalFooter>\n          <Button colorScheme=\"brand\" mr={3} onClick={onCopy}>\n            {hasCopied ? \"Copied!\" : \"Copy\"}\n          </Button>\n          <Button colorScheme=\"gray\" onClick={onClose}>\n            Close\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default PaletteModal;\n","import React, { FC, useState, useRef } from \"react\";\nimport Hue from \"react-color/lib/components/hue/Hue\";\nimport manager from \"./ThemeManager\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalCloseButton,\n  ModalBody,\n  ModalFooter,\n  Button,\n  Box,\n  Flex,\n  Stack,\n  Code,\n  Spacer,\n  Input,\n  FormHelperText,\n  FormLabel,\n  FormControl,\n} from \"@chakra-ui/react\";\nimport { observer } from \"mobx-react-lite\";\n\nconst AddComponentModal: FC<any> = observer(({ isOpen, onClose, onSubmit }) => {\n  const nameEl = useRef<HTMLInputElement>(null);\n  const [name, setName] = useState(\"\");\n  const [key, setKey] = useState(\"\");\n\n  const keyAlreadyExists = !!manager.components[key];\n\n  const isValid = !!name && !!key && !key.includes(\" \") && !keyAlreadyExists;\n\n  return (\n    <Modal\n      initialFocusRef={nameEl}\n      isOpen={isOpen}\n      isCentered\n      onClose={onClose}\n      size=\"md\"\n    >\n      <ModalOverlay />\n      <ModalContent>\n        <form onSubmit={(e) => e.preventDefault()}>\n          <ModalHeader>Add a Component</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <FormControl>\n              <FormLabel>Component Name</FormLabel>\n              <Input\n                ref={nameEl}\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n                placeholder=\"eg: Example Form\"\n              />\n              <Spacer h={4} />\n              <FormLabel>Component Key</FormLabel>\n              <Input\n                value={key}\n                onChange={(e) => setKey(e.target.value)}\n                placeholder=\"eg: Form\"\n              />\n              <FormHelperText>\n                This will point to <Code>theme.components[component_key]</Code>\n              </FormHelperText>\n            </FormControl>\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              type=\"submit\"\n              colorScheme=\"brand\"\n              mr={3}\n              onClick={() => onSubmit({ name, key })}\n              disabled={!isValid}\n            >\n              Add Component\n            </Button>\n            <Button colorScheme=\"gray\" onClick={onClose}>\n              Cancel\n            </Button>\n          </ModalFooter>\n        </form>\n      </ModalContent>\n    </Modal>\n  );\n});\n\nexport default AddComponentModal;\n","import axios from \"axios\";\nimport * as WebFont from \"webfontloader\";\n\nconst API_KEY = \"AIzaSyDNOXY-FJ0rMylNSR0W1HtssQXQzZx3cfE\";\n\nexport const list = async () => {\n  const res = await axios.get(\n    `https://www.googleapis.com/webfonts/v1/webfonts?key=${API_KEY}&sort=popularity`\n  );\n  return res.data.items;\n};\n\nexport const load = async (families: string[]) => {\n  WebFont.load({\n    google: {\n      families,\n    },\n  });\n};\n","import React, { FC, useState, useRef, useEffect } from \"react\";\nimport Hue from \"react-color/lib/components/hue/Hue\";\nimport manager from \"./ThemeManager\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalCloseButton,\n  ModalBody,\n  ModalFooter,\n  Button,\n  Stack,\n  Checkbox,\n  Tag,\n  TagLabel,\n  TagCloseButton,\n  Wrap,\n  useClipboard,\n  Input,\n} from \"@chakra-ui/react\";\nimport { observer } from \"mobx-react-lite\";\nimport * as fontService from \"./fonts\";\nimport { autorun } from \"mobx\";\nimport { SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG } from \"constants\";\n\nautorun(() => {\n  const selectedFonts = manager.getSelectedFonts();\n  if (selectedFonts.length) {\n    fontService.load(manager.getSelectedFonts());\n  }\n});\n\nconst FontLoaderModal: FC<any> = observer(({ isOpen, onClose, onSubmit }) => {\n  const nameEl = useRef<HTMLInputElement>(null);\n  const [fonts, setFonts] = useState([]);\n  const [search, setSearch] = useState(\"\");\n\n  useEffect(() => {\n    fontService.list().then(setFonts);\n  }, []);\n\n  const selectedFonts = manager.getSelectedFonts();\n\n  const fontFamiliesStr = selectedFonts.reduce(\n    (str: string, fontFamily: string, i: number) => {\n      str += `'${fontFamily}'`;\n      if (i < selectedFonts.length - 1) {\n        str += \", \";\n      }\n      return str;\n    },\n    \"\"\n  );\n\n  const { hasCopied, onCopy } = useClipboard(\n    JSON.stringify(\n      {\n        body: fontFamiliesStr,\n        heading: fontFamiliesStr,\n        mono: fontFamiliesStr,\n      },\n      null,\n      2\n    )\n  );\n\n  return (\n    <Modal\n      initialFocusRef={nameEl}\n      isOpen={isOpen}\n      isCentered\n      onClose={onClose}\n      size=\"md\"\n    >\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Manage Loaded Fonts</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <Stack spacing={3}>\n            <Input\n              placeholder=\"Search...\"\n              value={search}\n              onChange={(e) => setSearch(e.target.value)}\n            />\n            <Wrap>\n              {selectedFonts.map((fontFamily) => (\n                <Tag\n                  size={\"md\"}\n                  key={fontFamily}\n                  borderRadius=\"md\"\n                  variant=\"outline\"\n                  colorScheme=\"blue\"\n                >\n                  <TagLabel>{fontFamily}</TagLabel>\n                  <TagCloseButton\n                    onClick={() => manager.unselectFont(fontFamily)}\n                  />\n                </Tag>\n              ))}\n            </Wrap>\n            <Stack h={300} px={1} spacing={1} overflowY=\"auto\">\n              {fonts\n                .filter((font: any) =>\n                  font.family.toLowerCase().includes(search.toLowerCase())\n                )\n                .slice(0, 250)\n                .map((font: any) => (\n                  <Checkbox\n                    isChecked={selectedFonts.includes(font.family)}\n                    onChange={(e) => {\n                      if (e.target.checked) {\n                        manager.selectFont(font.family);\n                      } else {\n                        manager.unselectFont(font.family);\n                      }\n                    }}\n                  >\n                    {font.family}\n                  </Checkbox>\n                ))}\n            </Stack>\n          </Stack>\n        </ModalBody>\n        <ModalFooter>\n          <Button colorScheme=\"brand\" mr={3} onClick={onCopy}>\n            {hasCopied ? \"Copied!\" : \"Copy\"}\n          </Button>\n          <Button colorScheme=\"gray\" onClick={onClose}>\n            Close\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n});\n\nexport default FontLoaderModal;\n","import React, { useState, FC } from \"react\";\nimport {\n  Flex,\n  Box,\n  IconButton,\n  SimpleGrid,\n  ChakraProvider,\n  useDisclosure,\n  CloseButton,\n  Stack,\n  Text,\n  theme as DEFAULT_THEME,\n  extendTheme,\n  useColorMode,\n  Center,\n  Switch,\n  useColorModeValue,\n  FormControl,\n  FormLabel,\n  Tooltip,\n} from \"@chakra-ui/react\";\nimport {\n  IoMdCode as CodeIcon,\n  IoMdClose as CloseIcon,\n  IoMdColorPalette as ColorIcon,\n  IoMdAddCircleOutline as AddIcon,\n} from \"react-icons/io\";\nimport {\n  BiFontFamily as FontIcon,\n  BiDownload as DownloadIcon,\n} from \"react-icons/bi\";\nimport \"./App.css\";\nimport { AnimatePresence, motion, MotionConfig } from \"framer-motion\";\nimport MotionBox from \"./MotionBox\";\nimport ComponentItem from \"./ComponentItem\";\nimport manager from \"./ThemeManager\";\nimport { observer } from \"mobx-react-lite\";\nimport { Editor } from \"./Editor\";\nimport { autorun } from \"mobx\";\nimport PaletteModal from \"./PaletteModal\";\nimport AddComponentModal from \"./AddComponentModal\";\nimport downloadFile from \"js-file-download\";\n\nimport * as fonts from \"./fonts\";\nimport FontLoaderModal from \"./FontLoaderModal\";\n\nconst variants = {\n  menu: {\n    open: {\n      transition: {\n        staggerChildren: 0.05,\n        staggerDirection: 1,\n      },\n    },\n    closed: {\n      transition: {\n        staggerChildren: 0.05,\n        staggerDirection: -1,\n      },\n    },\n  },\n  menuItem: {\n    open: {\n      opacity: 1,\n      x: 0,\n    },\n    closed: {\n      opacity: 0,\n      x: 36,\n    },\n  },\n};\n\nconst CodeMenu: FC<any> = ({\n  onClick,\n  onColorsClick,\n  onFontsClick,\n  onDownloadClick,\n  isOpen,\n  ...otherProps\n}) => {\n  return (\n    <Stack spacing={3} {...otherProps}>\n      <Tooltip placement=\"left\" label={isOpen ? \"Hide Code\" : \"Show Code\"}>\n        <IconButton\n          colorScheme=\"whiteAlpha\"\n          color=\"whiteAlpha.600\"\n          onClick={onClick}\n          bg=\"#212121\"\n          aria-label=\"show code\"\n          variant=\"outline\"\n          icon={isOpen ? <CloseIcon /> : <CodeIcon />}\n        />\n      </Tooltip>\n      <AnimatePresence>\n        {isOpen && (\n          <motion.div\n            variants={variants.menu}\n            style={{ paddingTop: \"6px\" }}\n            initial=\"closed\"\n            animate={\"open\"}\n            exit={\"closed\"}\n          >\n            <motion.div\n              variants={variants.menuItem}\n              style={{ padding: \"6px 0\" }}\n            >\n              <Tooltip placement=\"left\" label=\"Open Palettes\">\n                <IconButton\n                  variant=\"outline\"\n                  colorScheme=\"whiteAlpha\"\n                  color=\"whiteAlpha.600\"\n                  bg=\"#212121\"\n                  onClick={onColorsClick}\n                  aria-label=\"colors\"\n                  icon={<ColorIcon />}\n                />\n              </Tooltip>\n            </motion.div>\n            <motion.div\n              variants={variants.menuItem}\n              style={{ padding: \"6px 0\" }}\n            >\n              <Tooltip placement=\"left\" label=\"Open Fonts\">\n                <IconButton\n                  variant=\"outline\"\n                  colorScheme=\"whiteAlpha\"\n                  color=\"whiteAlpha.600\"\n                  bg=\"#212121\"\n                  onClick={onFontsClick}\n                  aria-label=\"fonts\"\n                  icon={<FontIcon />}\n                />\n              </Tooltip>\n            </motion.div>\n            <motion.div\n              variants={variants.menuItem}\n              style={{ padding: \"6px 0\" }}\n            >\n              <Tooltip placement=\"left\" label=\"Download Theme File\">\n                <IconButton\n                  variant=\"outline\"\n                  colorScheme=\"whiteAlpha\"\n                  color=\"whiteAlpha.600\"\n                  bg=\"#212121\"\n                  onClick={onDownloadClick}\n                  aria-label=\"download\"\n                  icon={<DownloadIcon />}\n                />\n              </Tooltip>\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </Stack>\n  );\n};\n\n// save to local storage\nautorun(\n  () => {\n    localStorage.setItem(\"data\", JSON.stringify(manager.data));\n  },\n  {\n    delay: 3000,\n  }\n);\n\nconst App = observer(() => {\n  const [sidebarOpen, setSidebarOpen] = useState(true);\n  const modals = {\n    color: useDisclosure(),\n    component: useDisclosure(),\n    font: useDisclosure(),\n  };\n  const { colorMode, toggleColorMode } = useColorMode();\n  const theme = manager.theme;\n  const cardBg = useColorModeValue(\"whiteAlpha.800\", \"whiteAlpha.50\");\n\n  return (\n    <MotionConfig transition={{ type: \"spring\", stiffness: 500, damping: 50 }}>\n      <Flex h=\"100%\">\n        <Flex direction=\"column\" className=\"content\" flex={1}>\n          <Flex\n            className=\"header\"\n            h=\"64px\"\n            align=\"center\"\n            justify=\"space-between\"\n            px={4}\n            borderBottom=\"1px solid\"\n            borderColor=\"whiteAlpha.200\"\n            bg=\"#212121\"\n            color=\"white\"\n          >\n            <Text fontSize=\"md\" fontWeight=\"bold\">\n              Chakra Theme Tool\n            </Text>\n            <Box flex={1} />\n            <FormControl\n              w=\"auto\"\n              display=\"flex\"\n              alignItems=\"center\"\n              pos=\"relative\"\n              right={sidebarOpen ? 0 : \"48px\"}\n              transition=\"right .4s\"\n            >\n              <FormLabel fontSize=\"sm\" mb={0} htmlFor=\"dark-mode-switch\">\n                Dark Mode\n              </FormLabel>\n              <Switch\n                id=\"dark-mode-switch\"\n                colorScheme=\"brand\"\n                isChecked={colorMode === \"dark\"}\n                onChange={(e) => {\n                  toggleColorMode();\n                }}\n              />\n            </FormControl>\n          </Flex>\n          <Box className=\"main\" flex={1} pos=\"relative\" overflowY=\"auto\">\n            <SimpleGrid\n              display={manager.getSelected() ? \"none\" : \"grid\"}\n              columns={[1, 1, 1, 1, 2, 2, 3]}\n              spacing={8}\n              p={8}\n            >\n              {manager.componentKeys.map((componentKey) => (\n                <Box\n                  key={componentKey}\n                  height=\"250px\"\n                  bg={cardBg}\n                  overflow=\"hidden\"\n                  rounded=\"xl\"\n                  cursor=\"pointer\"\n                  onClick={() => manager.setSelected(componentKey)}\n                  transition=\"all .25s\"\n                  _hover={{ transform: \"scale(1.015)\", boxShadow: \"md\" }}\n                  boxShadow={\"sm\"}\n                >\n                  <ComponentItem\n                    mode={\n                      manager.getSelected() === componentKey\n                        ? \"expanded\"\n                        : \"grid-item\"\n                    }\n                    componentKey={componentKey}\n                  />\n                </Box>\n              ))}\n              <Box\n                height=\"250px\"\n                bg={cardBg}\n                overflow=\"hidden\"\n                rounded=\"xl\"\n                cursor=\"pointer\"\n                onClick={modals.component.onOpen}\n                transition=\"all .25s\"\n                _hover={{ transform: \"scale(1.015)\", boxShadow: \"md\" }}\n                boxShadow={\"sm\"}\n              >\n                <Center flexDirection=\"column\" h=\"100%\" fontSize=\"xl\">\n                  <Text fontSize=\"md\" fontWeight=\"bold\">\n                    Add a Component\n                  </Text>\n                  <AddIcon />\n                </Center>\n              </Box>\n            </SimpleGrid>\n            {manager.getSelected() && (\n              <Box\n                pos=\"absolute\"\n                top={0}\n                right={0}\n                bottom={0}\n                left={0}\n                height=\"100%\"\n                bg={cardBg}\n                overflowY=\"auto\"\n              >\n                <ComponentItem\n                  mode=\"expanded\"\n                  componentKey={manager.getSelected()}\n                />\n                <CloseButton\n                  pos=\"absolute\"\n                  top=\"12px\"\n                  right=\"12px\"\n                  onClick={() => manager.setSelected(null)}\n                />\n              </Box>\n            )}\n          </Box>\n        </Flex>\n        <MotionBox\n          className=\"sidebar\"\n          borderLeft=\"1px solid\"\n          borderColor=\"gray.700\"\n          w=\"480px\"\n          animate={{\n            marginRight: sidebarOpen ? 0 : \"-480px\",\n          }}\n        >\n          <Editor />\n        </MotionBox>\n      </Flex>\n      <PaletteModal\n        isOpen={modals.color.isOpen}\n        onClose={modals.color.onClose}\n      />\n      <FontLoaderModal\n        isOpen={modals.font.isOpen}\n        onClose={modals.font.onClose}\n      />\n      <AddComponentModal\n        isOpen={modals.component.isOpen}\n        onClose={modals.component.onClose}\n        onSubmit={(data: any) => {\n          manager.addComponent(data);\n          modals.component.onClose();\n        }}\n      />\n      <CodeMenu\n        onClick={() => setSidebarOpen((p) => !p)}\n        onColorsClick={modals.color.onOpen}\n        onFontsClick={modals.font.onOpen}\n        onDownloadClick={() => {\n          downloadFile(manager.themeStr, \"theme.js\");\n        }}\n        isOpen={sidebarOpen}\n        pos=\"fixed\"\n        top={\"12px\"}\n        right={\"12px\"}\n        zIndex={100}\n      />\n    </MotionConfig>\n  );\n});\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { FC, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport {\n  ChakraProvider,\n  ColorModeScript,\n  useToast,\n  Box,\n  Code,\n  Button,\n} from \"@chakra-ui/react\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"focus-visible/dist/focus-visible\";\nimport manager from \"./ThemeManager\";\nimport { observer } from \"mobx-react-lite\";\nimport { ErrorBoundary } from \"react-error-boundary\";\n\nconst ErrorToast: FC<any> = ({ error, resetErrorBoundary }) => {\n  const toast = useToast();\n\n  useEffect(() => {\n    // alert(\"maybe\");\n    // toast({\n    //   description:\n    //     \"Oops, it looks like there's an error in your theme. Now using a fallback theme. Please fix the code and refresh.\",\n    //   status: \"error\",\n    // });\n    const toastId = toast({\n      duration: 100000,\n      isClosable: false,\n      render: () => (\n        <Box color=\"whiteAlpha.700\" p={3} bg=\"red.500\">\n          Oops, encountered an error in your theme:{\" \"}\n          <Code colorScheme=\"whiteAlpha\">{error.message}</Code>. Using a\n          fallback theme instead. Please fix and{\" \"}\n          <Button\n            variant=\"link\"\n            colorScheme=\"white\"\n            onClick={() => resetErrorBoundary()}\n          >\n            try again.\n          </Button>\n        </Box>\n      ),\n    });\n\n    return () => {\n      if (toastId) toast.close(toastId);\n    };\n  }, []);\n\n  return null;\n};\n\nconst ErrorFallback: FC<any> = ({ error, resetErrorBoundary }) => {\n  return (\n    <ChakraProvider>\n      <App />\n      <ErrorToast error={error} resetErrorBoundary={resetErrorBoundary} />\n    </ChakraProvider>\n  );\n};\n\nconst ThemedApp = observer(() => {\n  const theme = manager.theme;\n  return (\n    <ErrorBoundary FallbackComponent={ErrorFallback}>\n      <ChakraProvider theme={theme}>\n        <App />\n      </ChakraProvider>\n    </ErrorBoundary>\n  );\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript initialColorMode={\"light\"} />\n    <ThemedApp />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}